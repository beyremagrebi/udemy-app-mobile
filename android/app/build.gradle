plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id "com.google.gms.google-services"
}

configurations.all {
    resolutionStrategy {
        // Exclude the conflicting module from ALL dependencies
        exclude group: 'androidx.media3', module: 'media3-exoplayer-rtsp'
        
        // Add this for Jitsi React Native dependencies
        eachDependency { details ->
            if (details.requested.group == 'com.facebook.react' && 
                (details.requested.name.contains('react-android') || details.requested.name.contains('hermes-android'))) {
                details.useTarget "${details.requested.group}:${details.requested.name}:0.77.2"
            }
        }
        
        // Force specific versions if needed
        force 'com.facebook.react:react-android:0.77.2'
        force 'com.facebook.react:hermes-android:0.77.2'
    }
}

dependencies {
    implementation platform('com.google.firebase:firebase-bom:34.0.0')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'androidx.multidex:multidex:2.0.1'

    // Add explicit React Native dependencies for Jitsi
    implementation 'com.facebook.react:react-android:0.77.2'
    implementation 'com.facebook.react:hermes-android:0.77.2'
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

// Load keystore properties
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

android {
    namespace = "com.example.erudaxis"
    compileSdk = 36 //flutter.compileSdkVersion
    
    // Only set ndkVersion if it's available and not null
    if (project.hasProperty('ANDROID_NDK_VERSION') && ANDROID_NDK_VERSION != null) {
        ndkVersion ANDROID_NDK_VERSION
    }
    
    packagingOptions {
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
        pickFirst 'lib/x86/libc++_shared.so'
        pickFirst 'lib/x86_64/libc++_shared.so'
        // Add these for Jitsi
        pickFirst '**/libc++_shared.so'
        pickFirst '**/libfbjni.so'
        pickFirst '**/libjsc.so'
        pickFirst '**/libglog.so'
        pickFirst '**/libhermes.so'
    }
    
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    // Add signing configs
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    defaultConfig {
        applicationId = "com.example.erudaxis"
        minSdk = 26
        targetSdk = flutter.targetSdkVersion
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
        multiDexEnabled true
    }

    buildTypes {
        release {
            // Use the release signing config
            signingConfig = signingConfigs.release
            
            // Optional: Enable code shrinking and obfuscation
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig = signingConfigs.debug
        }
    }
}

flutter {
    source = "../.."
}